import cv2
from ultralytics import YOLO
import os
from datetime import datetime

# ===============================
# ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
# ===============================
MODEL_PERSON_BIKE = "models/yolov8m.pt"   # ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ô + ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå
MODEL_HELMET = "models/helmet.pt"         # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Ñ
CAPTURE_DIR = "captures"
CONF_THRESHOLD = 0.55

CLASS_IDS_MAIN = [0, 3]  # person=0, motorcycle=3
os.makedirs(CAPTURE_DIR, exist_ok=True)

# ===============================
# üöÄ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
# ===============================
print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8 (person + motorcycle + helmet)...")
model_main = YOLO(MODEL_PERSON_BIKE)
model_helmet = YOLO(MODEL_HELMET)
print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!")

# ===============================
# üß† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö (IoU)
# ===============================
def is_overlapping(boxA, boxB, threshold=0.2):
    """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ threshold ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    xA = max(boxA[0], boxB[0])
    yA = max(boxA[1], boxB[1])
    xB = min(boxA[2], boxB[2])
    yB = min(boxA[3], boxB[3])
    interArea = max(0, xB - xA) * max(0, yB - yA)
    if interArea == 0:
        return False
    boxAArea = (boxA[2] - boxA[0]) * (boxA[3] - boxA[1])
    boxBArea = (boxB[2] - boxB[0]) * (boxB[3] - boxB[1])
    iou = interArea / float(boxAArea + boxBArea - interArea)
    return iou > threshold

# ===============================
# üé• ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
# ===============================
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
    exit()

print("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏Å‡∏î Q ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)")

while True:
    ret, frame = cap.read()
    if not ret:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        break

    # ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå =====
    results_main = model_main(frame, conf=CONF_THRESHOLD, classes=CLASS_IDS_MAIN)
    frame_main = results_main[0].plot()

    persons = []
    motorcycles = []

    for box in results_main[0].boxes:
        cls = int(box.cls[0])
        xyxy = box.xyxy[0].tolist()
        if results_main[0].names[cls] == "person":
            persons.append(xyxy)
        elif results_main[0].names[cls] == "motorcycle":
            motorcycles.append(xyxy)

    # ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Ñ =====
    results_helmet = model_helmet(frame, conf=CONF_THRESHOLD)
    helmets = [box.xyxy[0].tolist() for box in results_helmet[0].boxes]
    frame_helmet = results_helmet[0].plot()

    # ===== ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (Overlay 2 ‡πÇ‡∏°‡πÄ‡∏î‡∏•) =====
    annotated_frame = cv2.addWeighted(frame_main, 0.7, frame_helmet, 0.3, 0)

    # ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ‚Äú‡∏Ñ‡∏ô‡∏Ç‡∏µ‡πà‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Ñ‚Äù =====
    violation_found = False
    for person_box in persons:
        # ‡∏´‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô
        has_motorcycle = any(is_overlapping(person_box, moto_box, 0.2) for moto_box in motorcycles)
        if not has_motorcycle:
            continue

        # ‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏´‡∏±‡∏ß (‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì 1/3 ‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏ô)
        head_region = [
            person_box[0],
            person_box[1],
            person_box[2],
            person_box[1] + (person_box[3] - person_box[1]) / 3
        ]
        has_helmet = any(is_overlapping(head_region, helmet_box, 0.1) for helmet_box in helmets)

        if not has_helmet:
            # ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Ñ
            violation_found = True
            cv2.rectangle(
                annotated_frame,
                (int(person_box[0]), int(person_box[1])),
                (int(person_box[2]), int(person_box[3])),
                (0, 0, 255),
                3
            )
            cv2.putText(
                annotated_frame, "No Helmet!",
                (int(person_box[0]), int(person_box[1]) - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 0, 255), 3
            )

    # ===== ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î =====
    if violation_found:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{CAPTURE_DIR}/no_helmet_{timestamp}.jpg"
        cv2.imwrite(filename, frame)
        print(f"üö® ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Ñ -> {filename}")

    # ===== ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û =====
    cv2.imshow("SmartRider AI - Spatial No Helmet Detector", annotated_frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        print("üëã ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö SmartRider AI")
        break

cap.release()
cv2.destroyAllWindows()
