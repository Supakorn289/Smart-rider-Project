import cv2
from ultralytics import YOLO
import os
from datetime import datetime
import numpy as np

# ===============================
# ‚öôÔ∏è ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
# ===============================
MODEL_PERSON_BIKE = "models/yolov8m.pt"   # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô + ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå
MODEL_HELMET = "models/helmet.pt"         # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Ñ
CAPTURE_DIR = "captures"                  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î
LOG_FILE = "logs/detection_log.txt"       # [üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
CONF_THRESHOLD = 0.6                      # [üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á noise
IOU_PERSON_BIKE = 0.25                    # [üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå"
IOU_HELMET_HEAD = 0.15                    # [üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏Å

CLASS_IDS_MAIN = [0, 3]  # person=0, motorcycle=3 (YOLOv8 class IDs)
os.makedirs(CAPTURE_DIR, exist_ok=True)
os.makedirs("logs", exist_ok=True)         # [üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå log ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

# ===============================
# üöÄ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO
# ===============================
print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8 (person + motorcycle + helmet)...")
model_main = YOLO(MODEL_PERSON_BIKE)
model_helmet = YOLO(MODEL_HELMET)
print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!")

# ===============================
# üß† ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IoU (Intersection over Union)
# ===============================
def compute_iou(boxA, boxB):
    """[‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ IoU ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á 2 ‡∏Å‡∏•‡πà‡∏≠‡∏á"""
    xA, yA, xB, yB = boxA
    x1, y1, x2, y2 = boxB

    xi1, yi1 = max(xA, x1), max(yA, y1)
    xi2, yi2 = min(xB, x2), min(yB, y2)

    inter_area = max(0, xi2 - xi1) * max(0, yi2 - yi1)
    if inter_area <= 0:
        return 0.0

    boxA_area = (xB - xA) * (yB - yA)
    boxB_area = (x2 - x1) * (y2 - y1)
    union_area = boxA_area + boxB_area - inter_area

    return inter_area / union_area if union_area > 0 else 0.0


# ===============================
# üßπ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå YOLO (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
# ===============================
def filter_detections(results, target_classes, conf_threshold):
    """[üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    detections = []
    for box in results[0].boxes:
        cls = int(box.cls[0])
        conf = float(box.conf[0])
        if cls in target_classes and conf >= conf_threshold:
            detections.append(box.xyxy[0].tolist())
    return detections


# ===============================
# üé• ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
# ===============================
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
    exit()

print("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏Å‡∏î Q ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)")

# ===============================
# üîÅ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
# ===============================
while True:
    ret, frame = cap.read()
    if not ret:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        break

    # ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå =====
    results_main = model_main(frame, conf=CONF_THRESHOLD, classes=CLASS_IDS_MAIN)
    persons = filter_detections(results_main, [0], CONF_THRESHOLD)
    motorcycles = filter_detections(results_main, [3], CONF_THRESHOLD)
    frame_main = results_main[0].plot()

    # ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Ñ =====
    results_helmet = model_helmet(frame, conf=CONF_THRESHOLD)
    helmets = filter_detections(results_helmet, [0], CONF_THRESHOLD)  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ 0
    frame_helmet = results_helmet[0].plot()

    # ===== ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å 2 ‡πÇ‡∏°‡πÄ‡∏î‡∏• =====
    annotated_frame = cv2.addWeighted(frame_main, 0.7, frame_helmet, 0.3, 0)

    # ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏µ‡πà‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏Å =====
    violation_found = False
    for person_box in persons:
        has_motorcycle = any(compute_iou(person_box, moto_box) > IOU_PERSON_BIKE for moto_box in motorcycles)
        if not has_motorcycle:
            continue

        # ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô (1/3 ‡∏ö‡∏ô)
        head_region = [
            person_box[0],
            person_box[1],
            person_box[2],
            person_box[1] + (person_box[3] - person_box[1]) / 3
        ]
        has_helmet = any(compute_iou(head_region, helmet_box) > IOU_HELMET_HEAD for helmet_box in helmets)

        if not has_helmet:
            # ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Ñ
            violation_found = True
            cv2.rectangle(
                annotated_frame,
                (int(person_box[0]), int(person_box[1])),
                (int(person_box[2]), int(person_box[3])),
                (0, 0, 255), 3
            )
            cv2.putText(
                annotated_frame, "No Helmet!",
                (int(person_box[0]), int(person_box[1]) - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 0, 255), 3
            )

    # ===== ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î =====
    if violation_found:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{CAPTURE_DIR}/no_helmet_{timestamp}.jpg"
        cv2.imwrite(filename, frame)
        print(f"üö® ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Ñ -> {filename}")

        # [üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        with open(LOG_FILE, "a", encoding="utf-8") as log:
            log.write(f"[{timestamp}] ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å -> {filename}\n")

    # ===== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏û =====
    cv2.imshow("SmartRider AI - Helmet Detection (Enhanced)", annotated_frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        print("üëã ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö SmartRider AI")
        break

cap.release()
cv2.destroyAllWindows()
